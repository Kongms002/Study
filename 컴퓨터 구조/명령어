명령어 : 컴퓨터를 작동시키기 위해 사용

▶고급 언어와 저급 언어
  ■고급 언어 : 사람이 이해하기 위한 언어, 컴퓨터는 이해 못해서 저급 언어로 변환 해야함.(컴파일 언어, 인터프리터 언어)
    ●컴파일 언어 : 소스 코드 전체를 저급 언어로 변환하는 언어
    ●인터프리터 언어 : 소스 코드를 한 줄씩 실행하는 언어
  ■저급 언어 : 컴퓨터가 이해하는 언어(기계어, 어셈블리어)
    ●기계어 : 0과 1로 구성된 언어
    ●어셈블리어 : 기계어를 읽기 쉽게 번역한 언어


▶명렁어의 구조 : 연산 코드, 오퍼랜드
  ■연산 코드 : 명렁어가 수행할 연산
    데이터 전송, 산술/논리 연산, 제어 흐름 변경, 입출력 제어
  ■오퍼랜드 : 연산에 사용할 데이터가 위치한 곳(주소)
    오퍼랜드 개수에 따라 N-주소 명령어라 명칭함.

▶주소 지정 방식 : 연산에 사용할 데이터 찾는 방식
  ■즉시 주소 지정 방식 : 데이터를 오퍼랜드 필드에 직접 명시, 표현할 수 있는 데이터 크기 작아지나 별도의 과정이 없기 때문에 빠름.
  ■직접 주소 지정 방식 : 데이터가 위치한 주소(유효주소)를 오퍼랜드 필드에 명시, 즉시 주소 지정 방식보다 데이터 크기는 커졌지만 여전히 작음.
  ■간접 주소 지정 방식 : 유효주소의 주소를 오퍼랜드 필드에 명시, 표현 범위가 넓어지나 메모리 접근이 두 번 필요해서 느림.
  ■레지스터 주소 지정 방식 : 직접 주소 지정 방식과 비슷하나 데이터는 메모리가 아닌 레지스터에 있음. 레지스터는 CPU내부에 있어서 더 빠름.
  ■레지스터 간접 주소 지정 방식 : 데이터는 메모리에 있으나 레지스터에 유효주소를 저장하고 오퍼랜드 필드에 그 주소를 저장한 레지스터를 명시. 메모리 접근 횟수 한 번으로 빠름.
